- name: "Cust sha1:171aaa33103c04449567bfeadb0a49833ca7a6b0: k8s 1.25.4 -> 1.27, containerd 1.6.19 -> 1.6.x, weave -> flannel, OpenEBS 3.4.x -> 3.7.x"
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: 1.25.4
    containerd:
      version: 1.6.19
    weave:
      version: 2.6.x
    kotsadm:
      version: 1.96.3
      disableS3: true
    ekco:
      version: 0.26.4
    openebs:
      version: 3.4.x
      isLocalPVEnabled: true
      localPVStorageClassName: local
    prometheus:
      version: "0.63.0-45.7.1"
    metricsServer:
      version: 0.6.3
  upgradeSpec:
    kubernetes:
      version: 1.27.x
    containerd:
      version: 1.6.x
    flannel:
      version: 0.22.x
    kotsadm:
      version: 1.100.x
      disableS3: true
    ekco:
      version: latest
    openebs:
      version: 3.7.x
      isLocalPVEnabled: true
      localPVStorageClassName: local
    prometheus:
      version: 0.65.x
    metricsServer:
      version: 0.6.x
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # mount a localpv volume
    create_deployment_with_mounted_volume "migration-test" "default" "/data" "registry:2.8.1"

    # write to the volume
    create_random_file_and_upload_to_deployment "migration-test" "default" "./test.data" "/data/test.data"

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # verify data was migrated
    download_file_from_deployment_and_compare "migration-test" "default" "./test.data" "/data/test.data"

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure weave was removed
    if ls /etc/cni/net.d/*weave* >/dev/null 2>&1; then
      echo "weave CNI still installed on host"
      exit 1
    fi

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.27" ]]; then
      echo "Kubernetes was not upgraded to 1.27.x"
      exit 1
    fi

- name: "Cust sha1:9aed61a879834bbff0586a61784b4f56135671f7: k8s 1.23 -> 1.27, containerd 1.5.x -> 1.6.x, weave -> flannel, longhorn 1.2.x -> openebs 3.7.x"
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: 1.23.x
    weave:
      version: 2.6.x
    minio:
      version: 2022-06-11T19-55-32Z
    contour:
      version: 1.21.x
    registry:
      version: 2.7.x
    kotsadm:
      version: 1.88.x
    velero:
      version: 1.9.x
    ekco:
      version: 0.19.x
    containerd:
      version: 1.5.x
    longhorn:
      version: 1.2.x
  upgradeSpec:
    kubernetes:
      version: 1.27.x
    flannel:
      version: "0.22.x"
    contour:
      version: "1.25.x"
    registry:
      version: "2.8.x"
    kotsadm:
      version: latest
    containerd:
      version: "1.6.x"
    velero:
      version: "1.11.x"
    ekco:
      version: "latest"
    minio:
      version: "2023-06-29T05-12-28Z"
    openebs:
      version: "3.7.x"
      isLocalPVEnabled: true
      localPVStorageClassName: "local"
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # mount a localpv volume
    create_deployment_with_mounted_volume "migration-test" "default" "/data" "registry:2.8.1"

    # write to the volume
    create_random_file_and_upload_to_deployment "migration-test" "default" "./test.data" "/data/test.data"

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # verify data was migrated
    download_file_from_deployment_and_compare "migration-test" "default" "./test.data" "/data/test.data"

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure weave was removed
    if ls /etc/cni/net.d/*weave* >/dev/null 2>&1; then
      echo "weave CNI still installed on host"
      exit 1
    fi

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.27" ]]; then
      echo "Kubernetes was not upgraded to 1.27.x"
      exit 1
    fi

- name: "Cust sha1:f78c1e8cfec1cace37d9c96e0f35481f75ffdc26: k8s 1.19 -> 1.27, docker -> containerd, weave -> flannel, rook 1.0.4 -> openebs 3.7.x"
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: 1.19.16
    docker:
      version: 20.10.5
    weave:
      version: 2.6.5
    rook:
      version: 1.0.4
    contour:
      version: 1.20.1
    registry:
      version: 2.7.1
    prometheus:
      version: 0.53.1-30.1.0
    kotsadm:
      version: 1.66.0
    ekco:
      version: 0.18.0
      nodeUnreachableToleration: 1m
  upgradeSpec:
    kubernetes:
      version: "1.27.x"
    flannel:
      version: "0.22.x"
    openebs:
      version: "3.7.x"
      isLocalPVEnabled: true
      localPVStorageClassName: "local"
    contour:
      version: "1.25.x"
    prometheus:
      version: "0.65.x"
    registry:
      version: "2.8.x"
    containerd:
      version: "1.6.x"
    kotsadm:
      version: "1.100.x"
    minio:
      version: "latest"
    ekco:
      version: "latest"
      nodeUnreachableToleration: "1m"
  unsupportedOSIDs:
    - ubuntu-2204 # this version of docker is too old for 22.04
    - amazon-2023 # docker is not supported on amazon 2023
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # mount a localpv volume
    create_deployment_with_mounted_volume "migration-test" "default" "/data" "registry:2.8.1"

    # write to the volume
    create_random_file_and_upload_to_deployment "migration-test" "default" "./test.data" "/data/test.data"

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # verify data was migrated
    download_file_from_deployment_and_compare "migration-test" "default" "./test.data" "/data/test.data"

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure weave was removed
    if ls /etc/cni/net.d/*weave* >/dev/null 2>&1; then
      echo "weave CNI still installed on host"
      exit 1
    fi

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.27" ]]; then
      echo "Kubernetes was not upgraded to 1.27.x"
      exit 1
    fi

- name: "Cust sha1:a272ff47a5d0163c65b97c2d2c5acfbc0396f2c4: k8s 1.19 -> 1.21, rook 1.0.4 -> openebs 3.3"
  flags: "yes"
  numPrimaryNodes: 3
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kubernetes:
      version: 1.19.3
    docker:
      daemonConfig: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-opts": {
            "max-size": "100m",
            "max-file": "3"
          }
        }
      version: 19.03.10
    weave:
      version: 2.6.5
    rook:
      version: 1.0.4
    openebs:
      isCstorEnabled: false
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: 1.6.0
    contour:
      tlsMinimumProtocolVersion: '1.2'
      version: 1.7.0
    registry:
      version: 2.7.1
    prometheus:
      version: 0.49.0-17.1.3
    kotsadm:
      applicationSlug: a-test-app
      version: 1.57.0
    velero:
      version: 1.6.0
    ekco:
      minReadyMasterNodeCount: 2
      minReadyWorkerNodeCount: 0
      nodeUnreachableToleration: 5m
      rookShouldUseAllNodes: false
      shouldDisableClearNodes: false
      shouldDisableRebootServices: false
      shouldEnablePurgeNodes: false
      version: 0.16.0
    kurl:
      installerVersion: v2023.03.28-0
      additionalNoProxyAddresses: [ ]
    goldpinger:
      version: 3.2.0-4.1.1
  upgradeSpec:
    kubernetes:
      version: 1.21.14
    docker:
      daemonConfig: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-opts": {
            "max-size": "100m",
            "max-file": "3"
          }
        }
      version: 19.03.10
    weave:
      version: 2.6.5-20221025
    openebs:
      isCstorEnabled: false
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: 3.3.0
    minio:
      version: 2022-10-20T00-55-09Z
    contour:
      tlsMinimumProtocolVersion: '1.2'
      version: 1.23.0
    registry:
      version: 2.8.1
    kotsadm:
      applicationSlug: a-test-app
      version: 1.90.0
      s3Override: https://s3.kurl.sh/external/kotsadm-1.90.0.tar.gz
    velero:
      resticTimeout: 24h0m0s
      version: 1.9.2
    ekco:
      minReadyMasterNodeCount: 2
      minReadyWorkerNodeCount: 0
      nodeUnreachableToleration: 5m
      shouldDisableClearNodes: false
      shouldDisableRebootServices: false
      shouldEnablePurgeNodes: false
      version: 0.25.0
    goldpinger:
      version: 3.7.0-5.5.0
  unsupportedOSIDs:
    - ubuntu-2204 # this version of docker is too old for 22.04
    - rocky-91
    - rocky-9
    - ol-8x
    - amazon-2023 # docker is not supported on amazon 2023
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure rook was removed
    if kubectl get ns rook-ceph >/dev/null 2>&1; then
      echo "rook-ceph namespace still exists"
      exit 1
    fi

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.21" ]]; then
      echo "Kubernetes was not upgraded to 1.21.x"
      exit 1
    fi


- name: "Cust sha1:a272ff47a5d0163c65b97c2d2c5acfbc0396f2c4: k8s 1.21->1.26, openebs 3.3 -> 3.8.0, weave->flannel, docker->containerd"
  flags: "yes"
  numPrimaryNodes: 3
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kubernetes:
      version: 1.21.14
    docker:
      daemonConfig: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-opts": {
            "max-size": "100m",
            "max-file": "3"
          }
        }
      version: 19.03.10
    weave:
      version: 2.6.5-20221025
    openebs:
      isCstorEnabled: false
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: 3.3.0
    minio:
      version: 2022-10-20T00-55-09Z
    contour:
      tlsMinimumProtocolVersion: '1.2'
      version: 1.23.0
    registry:
      version: 2.8.1
    kotsadm:
      applicationSlug: a-test-app
      version: 1.90.0
      s3Override: https://s3.kurl.sh/external/kotsadm-1.90.0.tar.gz
    velero:
      resticTimeout: 24h0m0s
      version: 1.9.2
    ekco:
      minReadyMasterNodeCount: 2
      minReadyWorkerNodeCount: 0
      nodeUnreachableToleration: 5m
      shouldDisableClearNodes: false
      shouldDisableRebootServices: false
      shouldEnablePurgeNodes: false
      version: 0.25.0
    kurl:
      installerVersion: v2023.03.28-0
      additionalNoProxyAddresses: [ ]
    goldpinger:
      version: 3.7.0-5.5.0
  upgradeSpec:
    kubernetes:
      version: 1.26.6
    flannel:
      version: 0.22.x # changed from 0.22.0 for testgrid support
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: 3.8.0
    minio:
      version: 2023-09-04T19-57-37Z
    contour:
      tlsMinimumProtocolVersion: '1.2'
      version: 1.25.0
    registry:
      version: 2.8.2
    kotsadm:
      applicationSlug: a-test-app
      version: 1.102.0
      s3Override: https://s3.kurl.sh/external/kotsadm-1.102.0.tar.gz
    velero:
      resticTimeout: 24h0m0s
      version: 1.11.0
    ekco:
      minReadyMasterNodeCount: 2
      minReadyWorkerNodeCount: 0
      nodeUnreachableToleration: 5m
      shouldDisableClearNodes: false
      shouldDisableRebootServices: false
      shouldEnablePurgeNodes: false
      version: 0.28.3
    containerd:
      version: 1.6.21
    goldpinger:
      version: 3.7.0-6.0.1
  unsupportedOSIDs:
    - ubuntu-2204 # this version of docker is too old for 22.04
    - rocky-91
    - rocky-9
    - ol-8x
    - amazon-2023 # docker is not supported on amazon 2023
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.26" ]]; then
      echo "Kubernetes was not upgraded to 1.26.x"
      exit 1
    fi

- name: "Cust sha1:a272ff47a5d0163c65b97c2d2c5acfbc0396f2c4: k8s 1.19->1.26, rook 1.0.4 -> openebs 3.8.0, weave->flannel, docker->containerd"
  flags: "yes"
  numPrimaryNodes: 3
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kubernetes:
      version: 1.19.3
    docker:
      daemonConfig: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-opts": {
            "max-size": "100m",
            "max-file": "3"
          }
        }
      version: 19.03.10
    weave:
      version: 2.6.5
    rook:
      version: 1.0.4
    openebs:
      isCstorEnabled: false
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: 1.6.0
    contour:
      tlsMinimumProtocolVersion: '1.2'
      version: 1.7.0
    registry:
      version: 2.7.1
    prometheus:
      version: 0.49.0-17.1.3
    kotsadm:
      applicationSlug: a-test-app
      version: 1.57.0
    velero:
      version: 1.6.0
    ekco:
      minReadyMasterNodeCount: 2
      minReadyWorkerNodeCount: 0
      nodeUnreachableToleration: 5m
      rookShouldUseAllNodes: false
      shouldDisableClearNodes: false
      shouldDisableRebootServices: false
      shouldEnablePurgeNodes: false
      version: 0.16.0
    kurl:
      installerVersion: v2023.03.28-0
      additionalNoProxyAddresses: [ ]
    goldpinger:
      version: 3.2.0-4.1.1
  upgradeSpec:
    kubernetes:
      version: 1.26.6
    flannel:
      version: 0.22.x # changed from 0.22.0 for testgrid support
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: 3.8.0
    minio:
      version: 2023-09-04T19-57-37Z
    contour:
      tlsMinimumProtocolVersion: '1.2'
      version: 1.25.0
    registry:
      version: 2.8.2
    kotsadm:
      applicationSlug: a-test-app
      version: 1.102.0
      s3Override: https://s3.kurl.sh/external/kotsadm-1.102.0.tar.gz
    velero:
      resticTimeout: 24h0m0s
      version: 1.11.0
    ekco:
      minReadyMasterNodeCount: 2
      minReadyWorkerNodeCount: 0
      nodeUnreachableToleration: 5m
      shouldDisableClearNodes: false
      shouldDisableRebootServices: false
      shouldEnablePurgeNodes: false
      version: 0.28.3
    containerd:
      version: 1.6.21
    goldpinger:
      version: 3.7.0-6.0.1
  unsupportedOSIDs:
    - ubuntu-2204 # this version of docker is too old for 22.04
    - rocky-91
    - rocky-9
    - ol-8x
    - amazon-2023 # docker is not supported on amazon 2023
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure rook was removed
    if kubectl get ns rook-ceph >/dev/null 2>&1; then
      echo "rook-ceph namespace still exists"
      exit 1
    fi

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.26" ]]; then
      echo "Kubernetes was not upgraded to 1.26.x"
      exit 1
    fi

- name: "Cust sha1:52ed79b81826a130502b5df18c00d872e70c3b8e: k8s 1.17->1.26, rook 1.0.4 -> 1.12, weave->flannel, docker->containerd"
  flags: "yes"
  numPrimaryNodes: 3
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: 1.17.13
    weave:
      version: 2.6.5
      podCidrRange: /22
    rook:
      version: 1.0.4
    contour:
      version: 1.12.0
    registry:
      version: 2.7.1
    prometheus:
      version: 0.44.1
    kotsadm:
      version: 1.38.0
    applicationSlug: cd4pe
    velero:
      version: 1.5.1
    ekco:
      version: 0.10.0
    containerd:
      version: 1.4.3
  upgradeSpec:
    kubernetes:
      HACluster: true
      containerLogMaxFiles: 10
      containerLogMaxSize: 50Mi
      version: 1.26.6
    flannel:
      podCIDRRange: /22
      version: 0.22.x # changed from 0.22.2 for testgrid support
    rook:
#      blockDeviceFilter: vd[b-z] # removed
      isBlockStorageEnabled: true
      isSharedFilesystemDisabled: true
      version: 1.12.3
    contour:
      version: 1.25.2
    registry:
      version: 2.8.2
    prometheus:
      version: 0.68.0-51.0.0
    kotsadm:
      applicationSlug: puppet-application-manager
      version: 1.102.2
      s3Override: https://s3.kurl.sh/external/kotsadm-1.102.2.tar.gz
    velero:
      version: 1.11.1
    ekco:
      version: 0.28.3
    kurl:
      hostPreflights:
        apiVersion: troubleshoot.sh/v1beta2
        kind: HostPreflight
        spec:
          analyzers:
            - textAnalyze:
                checkName: forward-chain-reject-check
                fileName: host-collectors/run-host/iptables-forward-chain.txt
                outcomes:
                  - pass:
                      message: No default REJECT rule found in iptables FORWARD chain
                      when: 'false'
                  - fail:
                      message: >
                        Default REJECT rule found in iptables FORWARD chain.

                        Puppet Application Manager does not support a default
                        REJECT rule in the

                        FORWARD chain during installation. Run \"iptables -S
                        FORWARD\" to identify

                        the REJECT rule, remove it and re-run the installer. It
                        can be safely

                        appended to the FORWARD chain after the installation has
                        completed.
                      when: 'true'
                regex: (?m)^REJECT\\s+all\\s+.*\\s+anywhere\\s+anywhere
          collectors:
            - run:
                args:
                  - '-L'
                  - FORWARD
                collectorName: iptables-forward-chain
                command: iptables
      additionalNoProxyAddresses: [ ]
    containerd:
      version: 1.6.22
    metricsServer:
      version: 0.6.4
    goldpinger:
      version: 3.7.0-6.0.1
  unsupportedOSIDs:
    - ubuntu-2204 # this version of docker is too old for 22.04
    - rocky-91
    - rocky-9
    - ol-8x
    - amazon-2023 # docker is not supported on amazon 2023
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # deploy sample app
    install_and_customize_kurl_integration_test_application
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh

    # ensure we can redeploy sample app
    check_and_customize_kurl_integration_test_application

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.26" ]]; then
      echo "Kubernetes was not upgraded to 1.26.x"
      exit 1
    fi

- name: "Cust sha1:450f2b6c9eb9fcb88f047d735ca217d4a0c21d37: docker -> containerd, weave -> flannel, longhorn -> openebs"
  flags: "yes"
  cpu: 8
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.23.x"
    weave:
      version: "2.6.x"
    contour:
      version: "1.20.x"
    docker:
      version: "20.10.x"
    prometheus:
      version: "0.60.x"
    registry:
      version: "2.7.x"
    velero:
      version: "1.7.x"
    kotsadm:
      version: "1.80.x"
    ekco:
      version: "0.27.x"
    minio:
      version: "2020-01-25T02-50-51Z"
    longhorn:
      version: "1.2.x"
    metricsServer:
      version: "0.4.x"
    certManager:
      version: "1.9.x"
  upgradeSpec:
    kubernetes:
      version: "1.27.x"
    flannel:
      version: "0.22.x"
    openebs:
      version: "3.9.x"
      isLocalPVEnabled: true
      localPVStorageClassName: "local"
    contour:
      version: "1.25.x"
    containerd:
      version: "1.6.x"
    prometheus:
      version: "0.68.x"
    registry:
      version: "2.8.x"
    velero:
      version: "1.11.x"
    kotsadm:
      version: "1.103.x"
    ekco:
      version: "latest"
    minio:
      version: "2023-09-30T07-02-29Z"
    metricsServer:
      version: "0.6.x"
    certManager:
      version: "1.9.x"
  unsupportedOSIDs:
    - rocky-91
    - rocky-9
    - ol-8x
    - amazon-2023 # docker is not supported on amazon 2023
  postInstallScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh
    
    # if on ubuntu or amazon linux, the test application doesn't deploy:
    echo $OS_NAME
    if [[ "$OS_NAME" == "Ubuntu" || "$OS_NAME" == "Amazon Linux" ]]; then
      # mount a localpv volume
      create_deployment_with_mounted_volume "migration-test" "default" "/data" "registry:2.7.1"
    
      # write to the volume
      create_random_file_and_upload_to_deployment "migration-test" "default" "./test.data" "/data/test.data"
    
      # test object store
      minio_object_store_info
      validate_read_write_object_store rwtest testfile.txt
    else
      # deploy sample app 
      install_and_customize_kurl_integration_test_application
    fi
  postUpgradeScript: |
    # source helper functions
    source /opt/kurl-testgrid/testhelpers.sh
    
    # if on ubuntu or amazon linux, the test application wasn't deploy:
    if [[ "$OS_NAME" == "Ubuntu" || "$OS_NAME" == "Amazon Linux" ]]; then
      # verify data was migrated
      download_file_from_deployment_and_compare "migration-test" "default" "./test.data" "/data/test.data"
    
      # ensure object store is still working
      minio_object_store_info
      validate_testfile rwtest testfile.txt
    
      # install the app now
      install_and_customize_kurl_integration_test_application
    else
      # ensure we can redeploy sample app
      check_and_customize_kurl_integration_test_application
    fi

    # ensure kubernetes was upgraded
    if [[ ! "$(kubectl get nodes --sort-by='{.status.nodeInfo.kubeletVersion}' -o=jsonpath='{.items[0].status.nodeInfo.kubeletVersion}' | sed 's/^v*//')" =~ "1.27" ]]; then
      echo "Kubernetes was not upgraded to 1.27.x"
      exit 1
    fi


