// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cli/cli.go

// Package mock_cli is a generated GoMock package.
package mock_cli

import (
	io "io"
	log "log"
	reflect "reflect"

	readline "github.com/chzyer/readline"
	gomock "github.com/golang/mock/gomock"
	preflight "github.com/replicatedhq/kurl/pkg/preflight"
	afero "github.com/spf13/afero"
	viper "github.com/spf13/viper"
)

// MockCLI is a mock of CLI interface.
type MockCLI struct {
	ctrl     *gomock.Controller
	recorder *MockCLIMockRecorder
}

// MockCLIMockRecorder is the mock recorder for MockCLI.
type MockCLIMockRecorder struct {
	mock *MockCLI
}

// NewMockCLI creates a new mock instance.
func NewMockCLI(ctrl *gomock.Controller) *MockCLI {
	mock := &MockCLI{ctrl: ctrl}
	mock.recorder = &MockCLIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCLI) EXPECT() *MockCLIMockRecorder {
	return m.recorder
}

// DebugLogger mocks base method.
func (m *MockCLI) DebugLogger() *log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugLogger")
	ret0, _ := ret[0].(*log.Logger)
	return ret0
}

// DebugLogger indicates an expected call of DebugLogger.
func (mr *MockCLIMockRecorder) DebugLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugLogger", reflect.TypeOf((*MockCLI)(nil).DebugLogger))
}

// GetClusterPreflightRunner mocks base method.
func (m *MockCLI) GetClusterPreflightRunner() preflight.RunnerCluster {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterPreflightRunner")
	ret0, _ := ret[0].(preflight.RunnerCluster)
	return ret0
}

// GetClusterPreflightRunner indicates an expected call of GetClusterPreflightRunner.
func (mr *MockCLIMockRecorder) GetClusterPreflightRunner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterPreflightRunner", reflect.TypeOf((*MockCLI)(nil).GetClusterPreflightRunner))
}

// GetFS mocks base method.
func (m *MockCLI) GetFS() afero.Fs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFS")
	ret0, _ := ret[0].(afero.Fs)
	return ret0
}

// GetFS indicates an expected call of GetFS.
func (mr *MockCLIMockRecorder) GetFS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFS", reflect.TypeOf((*MockCLI)(nil).GetFS))
}

// GetHostPreflightRunner mocks base method.
func (m *MockCLI) GetHostPreflightRunner() preflight.RunnerHost {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostPreflightRunner")
	ret0, _ := ret[0].(preflight.RunnerHost)
	return ret0
}

// GetHostPreflightRunner indicates an expected call of GetHostPreflightRunner.
func (mr *MockCLIMockRecorder) GetHostPreflightRunner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostPreflightRunner", reflect.TypeOf((*MockCLI)(nil).GetHostPreflightRunner))
}

// GetReadline mocks base method.
func (m *MockCLI) GetReadline() *readline.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadline")
	ret0, _ := ret[0].(*readline.Instance)
	return ret0
}

// GetReadline indicates an expected call of GetReadline.
func (mr *MockCLIMockRecorder) GetReadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadline", reflect.TypeOf((*MockCLI)(nil).GetReadline))
}

// GetViper mocks base method.
func (m *MockCLI) GetViper() *viper.Viper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViper")
	ret0, _ := ret[0].(*viper.Viper)
	return ret0
}

// GetViper indicates an expected call of GetViper.
func (mr *MockCLIMockRecorder) GetViper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViper", reflect.TypeOf((*MockCLI)(nil).GetViper))
}

// Logger mocks base method.
func (m *MockCLI) Logger() *log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockCLIMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockCLI)(nil).Logger))
}

// Stderr mocks base method.
func (m *MockCLI) Stderr() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockCLIMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockCLI)(nil).Stderr))
}

// Stdout mocks base method.
func (m *MockCLI) Stdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockCLIMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockCLI)(nil).Stdout))
}
