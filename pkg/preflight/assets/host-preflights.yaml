# https://kurl.sh/docs/install-with-kurl/system-requirements
apiVersion: troubleshoot.sh/v1beta2
kind: HostPreflight
metadata:
  name: kurl-builtin
spec:
  collectors:
    - time: {}
    - cpu: {}
    - memory: {}
    - hostServices: {}
    - diskUsage:
        collectorName: "Ephemeral Disk Usage"
        path: /var/lib/kubelet
    - blockDevices:
        # rook block storage or cstor is enabled and not upgrade
        exclude: '{{kurl and (or (and .Installer.Spec.Rook.Version .Installer.Spec.Rook.IsBlockStorageEnabled) (and .Installer.Spec.OpenEBS.Version .Installer.Spec.OpenEBS.IsCstorEnabled)) (not .IsUpgrade) | not }}'
    - tcpLoadBalancer:
        collectorName: "Kubernetes API Server Load Balancer"
        port: 6443
        address: {{kurl .Installer.Spec.Kubernetes.LoadBalancerAddress }}
        timeout: 3m
        # ha and is first master (primary and not join) and not is upgrade
        exclude: '{{kurl and .Installer.Spec.Kubernetes.Version .Installer.Spec.Kubernetes.LoadBalancerAddress .IsPrimary (not .IsJoin) (not .IsUpgrade) | not }}'
    - tcpPortStatus:
        collectorName: "Kubernetes API TCP Port Status"
        port: 6443
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
    - tcpPortStatus:
        collectorName: "ETCD Client API TCP Port Status"
        port: 2379
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
    - tcpPortStatus:
        collectorName: "ETCD Server API TCP Port Status"
        port: 2380
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
    - tcpPortStatus:
        collectorName: "ETCD Health Server TCP Port Status"
        port: 2381
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        interface: lo
    - tcpPortStatus:
        collectorName: "Kubelet Health Server TCP Port Status"
        port: 10248
        exclude: '{{kurl and (not .IsUpgrade) | not }}'
        interface: lo
    - tcpPortStatus:
        collectorName: "Kubelet API TCP Port Status"
        port: 10250
        exclude: '{{kurl and (not .IsUpgrade) | not }}'
    - tcpPortStatus:
        collectorName: "Kube Controller Manager Health Server TCP Port Status"
        port: 10257
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        interface: lo
    - tcpPortStatus:
        collectorName: "Kube Scheduler Health Server TCP Port Status"
        port: 10259
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        interface: lo
    - tcpConnect:
        collectorName: "Kubernetes API TCP Connection Status"
        address: '{{kurl .Installer.Spec.Kubernetes.MasterAddress }}'
        exclude: '{{kurl and .Installer.Spec.Kubernetes.Version .Installer.Spec.Kubernetes.MasterAddress .IsJoin | not }}'
    - filesystemPerformance:
        collectorName: Filesystem Latency Two Minute Benchmark
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        timeout: 2m
        directory: /var/lib/etcd
        fileSize: 22Mi
        operationSizeBytes: 2300
        datasync: true
        enableBackgroundIOPS: true
        backgroundIOPSWarmupSeconds: 10
        backgroundWriteIOPS: 300
        backgroundWriteIOPSJobs: 6
        backgroundReadIOPS: 50
        backgroundReadIOPSJobs: 1

  analyzers:
    - cpu:
        checkName: "Number of CPUs"
        outcomes:
          - warn:
              when: "count < 4"
              message: At least 4 CPU cores are recommended
          - fail:
              when: "count < 2"
              message: At least 2 CPU cores are required, and 4 CPU cores are recommended
          - pass:
              message: This server has at least 4 CPU cores
    - memory:
        checkName: "Amount of Memory"
        outcomes:
          - warn:
              when: "< 8G"
              message: At least 8G of memory is recommended
          - fail:
              when: "< 4G"
              message: At least 4G of memory is required, and 8G of memory is recommended
          - pass:
              message: The system has at least 8G of memory
    - diskUsage:
        checkName: "Ephemeral Disk Usage"
        collectorName: "Ephemeral Disk Usage"
        outcomes:
          - fail:
              when: "total < 30Gi"
              message: The disk containing directory /var/lib/kubelet has less than 30Gi of total space
          - fail:
              when: "used/total > 80%"
              message: The disk containing directory /var/lib/kubelet is more than 80% full
          - warn:
              when: "used/total > 60%"
              message: The disk containing directory /var/lib/kubelet is more than 60% full
          - pass:
              message: The disk containing directory /var/lib/kubelet has at least 30Gi disk space available
    - tcpLoadBalancer:
        checkName: "Kubernetes API Server Load Balancer"
        collectorName: "Kubernetes API Server Load Balancer"
        # ha and is first master (primary and not join) and not is upgrade
        exclude: '{{kurl and .Installer.Spec.Kubernetes.Version .Installer.Spec.Kubernetes.LoadBalancerAddress .IsPrimary (not .IsJoin) (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "invalid-address"
              message: The load balancer address {{kurl .Installer.Spec.Kubernetes.LoadBalancerAddress }} is not valid.
          - warn:
              when: "connection-refused"
              message: Connection to {{kurl .Installer.Spec.Kubernetes.LoadBalancerAddress }} via load balancer was refused.
          - warn:
              when: "connection-timeout"
              message: Timed out connecting to {{kurl .Installer.Spec.Kubernetes.LoadBalancerAddress }} via load balancer. Check your firewall.
          - warn:
              when: "error"
              message: Unexpected port status
          - warn:
              when: "address-in-use"
              message: Port 6443 is unavailable
          - pass:
              when: "connected"
              message: Successfully connected to {{kurl .Installer.Spec.Kubernetes.LoadBalancerAddress }} via load balancer
          - warn:
              message: Unexpected port status
    - blockDevices:
        # rook block storage or cstor is enabled and not upgrade
        includeUnmountedPartitions: true
#        minimumAcceptableSize: 26843545600 # 1024 ^ 3 * 25, 25GiB
        minimumAcceptableSize: 10737418240 # 1024 ^ 3 * 10, 10GiB
        exclude: '{{kurl and (or (and .Installer.Spec.Rook.Version .Installer.Spec.Rook.IsBlockStorageEnabled) (and .Installer.Spec.OpenEBS.Version .Installer.Spec.OpenEBS.IsCstorEnabled)) (not .IsUpgrade) | not }}'
        outcomes:
          - pass:
              when: "{{kurl if (and .Installer.Spec.Rook.Version .Installer.Spec.Rook.BlockDeviceFilter) }}{{kurl .Installer.Spec.Rook.BlockDeviceFilter }}{{kurl else }}.*{{kurl end }} == 1"
              message: One available block device
          - pass:
              when: "{{kurl if (and .Installer.Spec.Rook.Version .Installer.Spec.Rook.BlockDeviceFilter) }}{{kurl .Installer.Spec.Rook.BlockDeviceFilter }}{{kurl else }}.*{{kurl end }} > 1"
              message: Multiple available block devices
          - fail:
              message: No available block devices
    - tcpPortStatus:
        checkName: "Kubernetes API TCP Port Status"
        collectorName: "Kubernetes API TCP Port Status"
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 6443 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 6443.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 6443. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 6443 is open
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "ETCD Client API TCP Port Status"
        collectorName: "ETCD Client API TCP Port Status"
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 2379 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 2379.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 2379. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 2379 is open
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "ETCD Server API TCP Port Status"
        collectorName: "ETCD Server API TCP Port Status"
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 2380 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 2380.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 2380. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 2380 is open
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "ETCD Health Server TCP Port Status"
        collectorName: "ETCD Health Server TCP Port Status"
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 2381 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 2381.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 2381. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 2381 is available
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "Kubelet Health Server TCP Port Status"
        collectorName: "Kubelet Health Server TCP Port Status"
        exclude: '{{kurl and (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 10248 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 10248.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 10248. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 10248 is available
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "Kubelet API TCP Port Status"
        collectorName: "Kubelet API TCP Port Status"
        exclude: '{{kurl and (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 10250 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 10250.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 10250. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 10250 is open
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "Kube Controller Manager Health Server TCP Port Status"
        collectorName: "Kube Controller Manager Health Server TCP Port Status"
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 10257 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 10257.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 10257. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 10257 is available
          - warn:
              message: Unexpected port status
    - tcpPortStatus:
        checkName: "Kube Scheduler Health Server TCP Port Status"
        collectorName: "Kube Scheduler Health Server TCP Port Status"
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to port 10259 was refused. This is likely to be a routing problem since this preflight configures a test server to listen on this port.
          - warn:
              when: "address-in-use"
              message: Another process was already listening on port 10259.
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to port 10259. Check your firewall.
          - fail:
              when: "error"
              message: Unexpected port status
          - pass:
              when: "connected"
              message: Port 10259 is available
          - warn:
              message: Unexpected port status
    - tcpConnect:
        checkName: "Kubernetes API TCP Connection Status"
        collectorName: "Kubernetes API TCP Connection Status"
        exclude: '{{kurl and .Installer.Spec.Kubernetes.Version .Installer.Spec.Kubernetes.MasterAddress .IsJoin | not }}'
        outcomes:
          - fail:
              when: "connection-refused"
              message: Connection to the Kubernetes API at address {{kurl .Installer.Spec.Kubernetes.MasterAddress }} was refused
          - fail:
              when: "connection-timeout"
              message: Timed out connecting to the Kubernetes API at address {{kurl .Installer.Spec.Kubernetes.MasterAddress }}
          - fail:
              when: "error"
              message: Unexpected error connecting to the Kubernetes API at address {{kurl .Installer.Spec.Kubernetes.MasterAddress }}
          - pass:
              when: "connected"
              message: Successfully connected to the Kubernetes API at address {{kurl .Installer.Spec.Kubernetes.MasterAddress }}
          - warn:
              message: Unexpected TCP connection status
    - filesystemPerformance:
        collectorName: Filesystem Latency Two Minute Benchmark
        exclude: '{{kurl and .IsPrimary (not .IsUpgrade) | not }}'
        outcomes:
          - pass:
              when: "p99 < 10ms"
              message: "Write latency is ok (p99 target < 10ms, actual: {{ .P99 }})"
          - warn:
              when: "p99 < 20ms"
              message: "Write latency is high. p99 target < 10ms, actual:{{ .String }}"
          - fail:
              when: "p99 >= 20ms"
              message: "Write latency is too high. p99 target < 10ms, actual:{{ .String }}"
    - time:
        checkName: "NTP Status"
        outcomes:
            - fail:
                when: "ntp == unsynchronized+inactive"
                message: "System clock is not synchronized"
            - warn:
                when: "ntp == unsynchronized+active"
                message: System clock not yet synchronized                
            - pass:
                when: "ntp == synchronized+active"
                message: "System clock is synchronized"
            - warn: 
                when: "timezone != UTC"
                message: "Non UTC timezone can interfere with system function"
            - pass:
                when: "timezone == UTC"
                message: "Timezone is set to UTC"
