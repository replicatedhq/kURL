// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/preflight/runner.go

// Package mock_preflight is a generated GoMock package.
package mock_preflight

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	analyzer "github.com/replicatedhq/troubleshoot/pkg/analyze"
	v1beta2 "github.com/replicatedhq/troubleshoot/pkg/apis/troubleshoot/v1beta2"
)

// MockRunnerHost is a mock of RunnerHost interface.
type MockRunnerHost struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerHostMockRecorder
}

// MockRunnerHostMockRecorder is the mock recorder for MockRunnerHost.
type MockRunnerHostMockRecorder struct {
	mock *MockRunnerHost
}

// NewMockRunnerHost creates a new mock instance.
func NewMockRunnerHost(ctrl *gomock.Controller) *MockRunnerHost {
	mock := &MockRunnerHost{ctrl: ctrl}
	mock.recorder = &MockRunnerHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerHost) EXPECT() *MockRunnerHostMockRecorder {
	return m.recorder
}

// RunHostPreflights mocks base method.
func (m *MockRunnerHost) RunHostPreflights(ctx context.Context, spec *v1beta2.HostPreflight, progressChan chan interface{}) ([]*analyzer.AnalyzeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunHostPreflights", ctx, spec, progressChan)
	ret0, _ := ret[0].([]*analyzer.AnalyzeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunHostPreflights indicates an expected call of RunHostPreflights.
func (mr *MockRunnerHostMockRecorder) RunHostPreflights(ctx, spec, progressChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunHostPreflights", reflect.TypeOf((*MockRunnerHost)(nil).RunHostPreflights), ctx, spec, progressChan)
}

// MockRunnerCluster is a mock of RunnerCluster interface.
type MockRunnerCluster struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerClusterMockRecorder
}

// MockRunnerClusterMockRecorder is the mock recorder for MockRunnerCluster.
type MockRunnerClusterMockRecorder struct {
	mock *MockRunnerCluster
}

// NewMockRunnerCluster creates a new mock instance.
func NewMockRunnerCluster(ctrl *gomock.Controller) *MockRunnerCluster {
	mock := &MockRunnerCluster{ctrl: ctrl}
	mock.recorder = &MockRunnerClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerCluster) EXPECT() *MockRunnerClusterMockRecorder {
	return m.recorder
}

// RunClusterPreflight mocks base method.
func (m *MockRunnerCluster) RunClusterPreflight(spec *v1beta2.Preflight, progressChan chan interface{}) ([]*analyzer.AnalyzeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunClusterPreflight", spec, progressChan)
	ret0, _ := ret[0].([]*analyzer.AnalyzeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunClusterPreflight indicates an expected call of RunClusterPreflight.
func (mr *MockRunnerClusterMockRecorder) RunClusterPreflight(spec, progressChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunClusterPreflight", reflect.TypeOf((*MockRunnerCluster)(nil).RunClusterPreflight), spec, progressChan)
}
