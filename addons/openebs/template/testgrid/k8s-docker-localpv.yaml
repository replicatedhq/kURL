- name: basic localpv
  installerSpec:
    kubernetes:
      version: "1.25.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_read_write_object_store rwtest testfile.txt

    # Check if the support bundle spec was installed
    echo "test whether the openebs support bundle spec was installed"
    supportBundle=$(kubectl get cm -n openebs kurl-openebs-supportbundle-spec -ojsonpath='{.data.support-bundle-spec}')
    echo "$supportBundle"
    echo "test if the support bundle has 'troubleshoot.io/kind: support-bundle' label"
    kubectl get cm -n openebs kurl-openebs-supportbundle-spec -oyaml | grep 'troubleshoot.io/kind: support-bundle'

- name: localpv upgrade from 2.6.0
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.21.x" # this is the latest version of k8s that supports openebs 2.6
    flannel:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "2020-01-25T02-50-51Z"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "2.6.0"
  upgradeSpec:
    kubernetes:
      version: "1.22.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_read_write_object_store rwtest testfile.txt
  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_testfile rwtest testfile.txt
    validate_read_write_object_store postupgrade upgradefile.txt

- name: airgap localpv
  airgap: true
  installerSpec:
    kubernetes:
      version: "1.25.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  preInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    rhel_9_install_host_packages lvm2 conntrack-tools socat container-selinux git
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_read_write_object_store rwtest testfile.txt

- name: localpv upgrade from 1.12.0
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.21.x" # this is the latest version of k8s that supports openebs 1.12
    weave:
      version: latest
    docker:
      version: "latest"
    minio:
      version: "2020-01-25T02-50-51Z"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "1.12.0"
  upgradeSpec:
    kubernetes:
      version: "1.21.x"
    weave:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_read_write_object_store rwtest testfile.txt
  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_testfile rwtest testfile.txt
    validate_read_write_object_store postupgrade upgradefile.txt
  unsupportedOSIDs:
  - rocky-91 # docker is not supported on rhel 9 variants

- name: localpv migrate from Rook 1.0.4 with old versions
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.19.x" # this is the latest version of k8s that supports rook 1.0.4
    flannel:
      version: latest
    containerd:
      version: "latest"
    rook:
      version: "1.0.x"
    kotsadm:
      version: "latest"
  upgradeSpec:
    kubernetes:
      version: "1.27.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    rook_ceph_object_store_info
    validate_read_write_object_store rwtest testfile.txt
    install_and_customize_kurl_integration_test_application

  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_testfile rwtest testfile.txt
    validate_read_write_object_store postupgrade upgradefile.txt
    check_and_customize_kurl_integration_test_application
    echo "Verify if rook-ceph namespace was removed after upgrade"
    if kubectl get namespace/rook-ceph ; then
       echo "Namespace rook-ceph was not removed"
       exit 1
    else
       echo "Namespace rook-ceph was removed"
    fi

- name: localpv migrate from rook 1.10.x and from k8s 1.24.x
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.24.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    rook:
      version: "1.10.x"
    kotsadm:
      version: "latest"
  upgradeSpec:
    kubernetes:
      version: "1.26.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
  unsupportedOSIDs:
    - centos-74 # Rook 1.8+ not supported on 3.10.0-693.el7.x86_64 kernel
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    rook_ceph_object_store_info
    validate_read_write_object_store rwtest testfile.txt
  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_testfile rwtest testfile.txt
    validate_read_write_object_store postupgrade upgradefile.txt
    echo "Verify if rook-ceph namespace was removed after upgrade"
    if kubectl get namespace/rook-ceph ; then
       echo "Namespace rook-ceph was not removed"
       exit 1
    else
       echo "Namespace rook-ceph was removed"
    fi

- name: localpv migrate from longhorn
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.24.9"
    flannel:
      version: "latest"
    containerd:
      version: "latest"
    ekco:
      version: "latest"
    prometheus:
      version: "0.60.1-41.7.3"
    minio:
      version: "latest"
    registry:
      version: "2.8.1"
    longhorn:
      version: "1.3.1"
  upgradeSpec:
    kubernetes:
      version: "1.24.9"
    flannel:
      version: "latest"
    containerd:
      version: "latest"
    ekco:
      version: "latest"
    prometheus:
      version: "latest"
    minio:
      version: "latest"
    registry:
      version: "2.8.1"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    # create a deployment using the longhorn storage class ("default" namespace).
    create_deployment_with_mounted_volume "migration-test" "default" "/data"
    # generate a random file and copies it to the pod deployed by the previously created deployment.
    create_random_file_and_upload_to_deployment "migration-test" "default" "./test.data" "/data/test.data"
    # pushes an image to the internal registry.
    test_push_image_to_registry
  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    # sleep for a while to guarantee that the pod has been scaled up.
    sleep 120
    # downloads the previously stored file and compares, expecting to see the same content.
    download_file_from_deployment_and_compare "migration-test" "default" "./test.data" "/data/test.data"
    # makes sure that the new pvc is being provisioned by openebs.
    pvc_uses_provisioner "migration-test" "default" "openebs"
    # pulls the image we pushed before the migration.
    test_pull_image_from_registry

    # ensure that longhorn has been removed
    if kubectl get ns | grep -q longhorn-system; then
      echo "longhorn-system namespace still exists"
      exit 1
    fi

- name: localpv upgrade from latest
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kubernetes:
      version: "1.25.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "2020-01-25T02-50-51Z"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "latest"
  upgradeSpec:
    kubernetes:
      version: "1.25.x"
    flannel:
      version: latest
    containerd:
      version: "latest"
    minio:
      version: "latest"
    kotsadm:
      version: "latest"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: default
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_read_write_object_store rwtest testfile.txt
  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    minio_object_store_info
    validate_testfile rwtest testfile.txt
    validate_read_write_object_store postupgrade upgradefile.txt


- name: localpv migrate from longhorn with kubernetes upgrade
  flags: "yes"
  installerApiEndpoint: https://kurl.sh
  installerSpec:
    kurl:
      installerVersion: "v2024.07.02-0"
    kubernetes:
      version: "1.24.9"
    flannel:
      version: "latest"
    containerd:
      version: "latest"
    ekco:
      version: "latest"
    prometheus:
      version: "0.60.1-41.7.3"
    minio:
      version: "latest"
    registry:
      version: "2.8.1"
    longhorn:
      version: "1.3.1"
  upgradeSpec:
    kubernetes:
      version: "1.25.x"
    flannel:
      version: "latest"
    containerd:
      version: "latest"
    ekco:
      version: "latest"
    prometheus:
      version: "latest"
    minio:
      version: "latest"
    registry:
      version: "2.8.1"
    openebs:
      isLocalPVEnabled: true
      localPVStorageClassName: openebs
      namespace: openebs
      version: "__testver__"
      s3Override: "__testdist__"
  postInstallScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    # create a deployment using the longhorn storage class ("default" namespace).
    create_deployment_with_mounted_volume "migration-test" "default" "/data"
    # generate a random file and copies it to the pod deployed by the previously created deployment.
    create_random_file_and_upload_to_deployment "migration-test" "default" "./test.data" "/data/test.data"
    # pushes an image to the internal registry.
    test_push_image_to_registry

    sleep 60
    kubectl get pods -A
    kubectl get pod -n kurl -o jsonpath='{.status.reason}'
  postUpgradeScript: |
    source /opt/kurl-testgrid/testhelpers.sh
    # sleep for a while to guarantee that the pod has been scaled up.
    sleep 120
    # downloads the previously stored file and compares, expecting to see the same content.
    download_file_from_deployment_and_compare "migration-test" "default" "./test.data" "/data/test.data"
    # makes sure that the new pvc is being provisioned by openebs.
    pvc_uses_provisioner "migration-test" "default" "openebs"
    # pulls the image we pushed before the migration.
    test_pull_image_from_registry

    # ensure that kubernetes has upgraded
    k8sVersion=$(kubectl get nodes -o jsonpath='{.items[0].status.nodeInfo.kubeletVersion}')
    echo $k8sVersion | grep 1.25

    # ensure that longhorn has been removed
    if kubectl get ns | grep -q longhorn-system; then
      echo "longhorn-system namespace still exists"
      exit 1
    fi
