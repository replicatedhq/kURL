apiVersion: v1
kind: ConfigMap
metadata:
  name: ekco-config
data:
  config.yaml: |
    node_unreachable_toleration: $EKCO_NODE_UNREACHABLE_TOLERATION_DURATION
    clear_dead_nodes: $EKCO_CLEAR_DEAD_NODES
    purge_dead_nodes: $EKCO_PURGE_DEAD_NODES
    min_ready_master_nodes: $EKCO_MIN_READY_MASTER_NODE_COUNT
    min_ready_worker_nodes: $EKCO_MIN_READY_WORKER_NODE_COUNT
    maintain_rook_storage_nodes: $EKCO_SHOULD_MAINTAIN_ROOK_STORAGE_NODES
    rook_storage_nodes: "$rook_storage_nodes"
    reconcile_rook_mds_placement: $EKCO_RECONCILE_ROOK_MDS_PLACEMENT
    reconcile_ceph_csi_resources: $EKCO_RECONCILE_CEPH_CSI_RESOURCES
    ceph_block_pool: replicapool
    ceph_filesystem: rook-shared-fs
    ceph_object_store: rook-ceph-store
    min_ceph_pool_replication: 1
    max_ceph_pool_replication: 3
    certificates_dir: /etc/kubernetes/pki
    reconcile_interval: 1m
    rotate_certs_image: replicated/ekco:v$EKCO_VERSION
    rotate_certs_namespace: kurl
    rotate_certs_ttl: 720h
    rotate_certs_check_interval: 24h
    rotate_certs: true
    registry_cert_namespace: kurl
    registry_cert_secret: registry-pki
    kurl_proxy_cert_namespace: default
    kurl_proxy_cert_secret: kotsadm-tls
    kotsadm_kubelet_cert_namespace: default
    kotsadm_kubelet_cert_secret: kubelet-client-cert
    contour_cert_namespace: projectcontour
    contour_cert_secret: contourcert
    envoy_cert_secret: envoycert
    rook_priority_class: "$EKCO_ROOK_PRIORITY_CLASS"
    host_task_image: replicated/ekco:v$EKCO_VERSION
    host_task_namespace: kurl
    enable_internal_load_balancer: $EKCO_ENABLE_INTERNAL_LOAD_BALANCER_BOOL
    internal_load_balancer_haproxy_image: $EKCO_HAPROXY_IMAGE
    pod_image_overrides: "$EKCO_POD_IMAGE_OVERRIDES"
    auto_approve_kubelet_csrs: true
    restart_failed_envoy_pods: $EKCO_RESTART_FAILED_ENVOY_PODS
    envoy_pods_not_ready_duration: $EKCO_ENVOY_PODS_NOT_READY_DURATION
    enable_ha_minio: $EKCO_MAINTAIN_MINIO
    minio_namespace: "$MINIO_NAMESPACE"
    minio_util_image: "$KURL_UTIL_IMAGE"
    enable_ha_kotsadm: $EKCO_MAINTAIN_KOTSADM
    rook_minimum_node_count: ${ROOK_MINIMUM_NODE_COUNT:-0}
    rook_ceph_image: "$ROOK_CEPH_IMAGE"
    rook_storage_class: "${STORAGE_CLASS:-distributed}"
    storage_migration_auth_token: "$EKCO_AUTH_TOKEN"
