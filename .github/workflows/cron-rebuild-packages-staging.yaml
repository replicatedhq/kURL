name: cron-rebuild-packages-staging
on:
  workflow_dispatch:
    inputs:
      index:
        description: rebuild from index
        required: true
        default: 0

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - id: set-matrix
        name: Build image matrix
        run: |
          git fetch --tags -f
          export VERSION_TAG=$(git tag | grep '^v20' | sort | tail -1)-dirty
          export KURL_UTIL_IMAGE=replicated/kurl-util:${VERSION_TAG}
          export KURL_BIN_UTILS_FILE=kurl-bin-utils-${VERSION_TAG}.tar.gz
          export KURL_BIN_UTILS_FILE_LATEST=kurl-bin-utils-latest.tar.gz

          OUTPUT=`bin/list-all-packages-actions-matrix.sh "${{ github.event.inputs.index }}"`
          echo "::set-output name=matrix::$OUTPUT"

  build-upload-packages:
    needs: build-matrix
    runs-on: ubuntu-18.04
    strategy:
      matrix: ${{fromJSON(needs.build-matrix.outputs.matrix)}}
      fail-fast: false
      max-parallel: 10
    steps:
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.16

      - uses: actions/checkout@v2

      - name: "${{ matrix.batch }} : Build batch"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          BATCH: ${{ matrix.batch }}
        run: |
          git fetch --tags -f
          export VERSION_TAG=$(git tag | grep '^v20' | sort | tail -1)-dirty
          export KURL_UTIL_IMAGE=replicated/kurl-util:${VERSION_TAG}

          for PKG in ${BATCH}; do
            if [ -z "$PKG" ]; then continue; fi

            make dist/$PKG

            MD5="$(openssl md5 -binary dist/$PKG | base64)"
            GITSHA="$(git rev-parse HEAD)"
            aws s3 cp dist/$PKG s3://kurl-sh/staging/${VERSION_TAG}/$PKG \
              --metadata md5="${MD5}",gitsha="${GITSHA}"
            aws s3 cp s3://kurl-sh/staging/${VERSION_TAG}/$PKG s3://kurl-sh/staging/$PKG \
              --metadata md5="${MD5}",gitsha="${GITSHA}"
          done
