name: deploy-staging

on:
  push:
    branches:
    - main
    paths:
    - '**'
    - '!testgrid/**'

jobs:
  get-tag:
    runs-on: ubuntu-20.04
    outputs:
      version_tag: ${{ steps.set-tag.outputs.version_tag }}
    steps:
    - uses: actions/checkout@v3
    - id: set-tag
      run: |
        git fetch --tags -f
        export VERSION_TAG=$(git tag | grep '^v20' | grep -v 'v2022\.09\.04' | sort | tail -1)-dirty
        echo "::set-output name=version_tag::${VERSION_TAG}"

  kurl-util-image:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    steps:
    - uses: actions/checkout@v3
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_DOCKER_USER }}
        password: ${{ secrets.DOCKERHUB_DOCKER_PASS }}
    - run: |
        export KURL_UTIL_IMAGE=$KURL_UTIL_IMAGE_ALPHA
        make -C kurl_util build-and-push-kurl-util-image

        export KURL_UTIL_IMAGE=replicated/kurl-util:${VERSION_TAG}
        docker tag $KURL_UTIL_IMAGE_ALPHA $KURL_UTIL_IMAGE

        make -C kurl_util push-kurl-util-image
      env:
        KURL_UTIL_IMAGE_ALPHA: replicated/kurl-util:alpha
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

  build-matrix:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    - kurl-util-image
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3

    - id: set-matrix
      name: Build image matrix
      run: |
        export KURL_UTIL_IMAGE=replicated/kurl-util:${VERSION_TAG}
        export KURL_BIN_UTILS_FILE=kurl-bin-utils-${VERSION_TAG}.tar.gz
        export KURL_BIN_UTILS_FILE_LATEST=kurl-bin-utils-latest.tar.gz
        OUTPUT=`bin/list-all-packages-actions-matrix.sh "${{ github.event.inputs.index }}"`
        echo "::set-output name=matrix::$OUTPUT"
      env:
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

  build-upload-packages:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    - build-matrix
    strategy:
      matrix: ${{fromJSON(needs.build-matrix.outputs.matrix)}}
      fail-fast: false
      max-parallel: 20
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: setup env
      id: env
      run: |
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      shell: bash

    - name: upload dist staging
      run: |
        export KURL_UTIL_IMAGE=replicated/kurl-util:${VERSION_TAG}
        export KURL_BIN_UTILS_FILE=kurl-bin-utils-${VERSION_TAG}.tar.gz
        export KURL_BIN_UTILS_FILE_LATEST=kurl-bin-utils-latest.tar.gz

        bin/upload-dist-staging.sh "${{ matrix.batch }}"
      env:
        S3_BUCKET: kurl-sh
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
        DOCKER_PRUNE: '1'
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

    - name: upload tag dirty
      run: |
        export KURL_UTIL_IMAGE=replicated/kurl-util:${VERSION_TAG}
        export KURL_BIN_UTILS_FILE=kurl-bin-utils-${VERSION_TAG}.tar.gz

        bin/upload-dist-versioned.sh "${{ matrix.batch }}"
      env:
        S3_BUCKET: kurl-sh
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
        PACKAGE_PREFIX: staging
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

  build-addons:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    - kurl-util-image
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '14'
    - run: make -C web deps
    - run: npm install
    - run: make generate-addons
      env:
        S3_BUCKET: kurl-sh
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "us-east-1"
        DIST_FOLDER: "staging"
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

  staging-docker-image:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: '14'

    - run: make -C web deps build

    - run: make web

    - run: |
        npm i -g npm @bugsnag/source-maps
        bugsnag-source-maps upload-node \
          --api-key ${{ secrets.BUGSNAG_API_KEY }} \
          --app-version ${GITHUB_SHA:0:7} \
          --directory ./web/build \
          --overwrite
      env:
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

    - run: |
        docker build -f deploy/Dockerfile-slim \
          --build-arg version=${GITHUB_SHA:0:7} \
          --build-arg version_tag=${VERSION_TAG} \
          -t 923411875752.dkr.ecr.us-east-1.amazonaws.com/kurl:${VERSION_TAG}-${GITHUB_SHA:0:7} .
      env:
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

    - uses: docker/login-action@v2
      with:
        registry: 923411875752.dkr.ecr.us-east-1.amazonaws.com
        username: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}

    - run: |
        docker push 923411875752.dkr.ecr.us-east-1.amazonaws.com/kurl:${VERSION_TAG}-${GITHUB_SHA:0:7}
      env:
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

  deploy-staging-eks:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    - staging-docker-image
    - kurl-util-image
    - build-upload-packages
    steps:
    - uses: actions/checkout@v3

    - name: kustomize
      run: |
        curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/tags/v2.0.0 | \
          grep browser_download | \
          grep linux | \
          cut -d '"' -f 4 | \
          xargs sudo curl -O -L && \
          sudo mv kustomize_*_linux_amd64 /usr/local/bin/kustomize && \
          sudo chmod +x /usr/local/bin/kustomize
        pushd kustomize/overlays/staging
        kustomize edit set image 923411875752.dkr.ecr.us-east-1.amazonaws.com/kurl:${VERSION_TAG}-${GITHUB_SHA:0:7}
        kustomize build . | sed "s/__VERSION_TAG__/${VERSION_TAG}/g" > kurl.yaml
        popd
      env:
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}

    - name: ssh-key
      env:
        GITOPS_DEPLOY_KEY: ${{ secrets.GITOPS_DEPLOY_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$GITOPS_DEPLOY_KEY" > ~/.ssh/id_rsa
        chmod 400 ~/.ssh/id_rsa
        echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' \
          >> ~/.ssh/known_hosts

    - name: release
      run: |
        cd ~ && git clone --single-branch -b main git@github.com:replicatedcom/gitops-deploy
        mkdir -p ~/gitops-deploy/kurl
        mv ${GITHUB_WORKSPACE}/kustomize/overlays/staging/kurl.yaml gitops-deploy/kurl/kurl.yaml
        cd ~/gitops-deploy
        git config user.email "kurl-github-actions@replicated.com"
        git config user.name "kURL GitHub Actions"
        git add .
        git commit --allow-empty -m "https://github.com/replicatedhq/kURL/actions/runs/${GITHUB_RUN_ID}" && \
          git push origin main

  testgrid-run:
    runs-on: ubuntu-20.04
    needs:
    - get-tag
    - deploy-staging-eks
    steps:

    - name: Sleep for 3 minutes
      uses: juliangruber/sleep-action@v1
      with:
        time: "3m"

    - name: Checkout
      uses: actions/checkout@v3

    - name: setup-go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Tgrun Build
      working-directory: ./testgrid/tgrun
      run: make build

    - name: Tgrun Queue
      id: queue
      env:
        TESTGRID_API_TOKEN: ${{ secrets.TESTGRID_PROD_API_TOKEN }}
        VERSION_TAG: ${{ needs.get-tag.outputs.version_tag }}
      run: |
        REF="STAGING-release-${VERSION_TAG}-$(date '+%Y%m%d%H%M%S')"
        ./testgrid/tgrun/bin/tgrun queue --staging \
          --ref "${REF}" \
          --spec ./testgrid/specs/deploy.yaml \
          --os-spec ./testgrid/specs/os-latest.yaml
        MSG="Testgrid Run(s) Executing @ https://testgrid.kurl.sh/run/${REF}"
        echo "::set-output name=msg::${MSG}"
