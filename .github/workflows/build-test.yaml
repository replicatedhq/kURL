name: build-test

on: [ pull_request ]

jobs:

  validate-go-mod:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - uses: actions/checkout@v4

      - run: go mod tidy -compat=1.17

  build-kurl-utils:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - uses: actions/checkout@v4

      - run: make -C kurl_util test build

  build-bin-kurl:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: setup env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - uses: actions/checkout@v4

      - run: make test build/bin/kurl

  test-shell:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - run: make docker-test-shell

  build-test-success:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - validate-go-mod
      - build-kurl-utils
      - build-bin-kurl
      - test-shell
    steps:
      - run: |
          if   [ "${{ needs.validate-go-mod.result }}" = "failure" ] \
            || [ "${{ needs.build-kurl-utils.result }}" = "failure" ] \
            || [ "${{ needs.build-bin-kurl.result }}" = "failure" ] \
            || [ "${{ needs.test-shell.result }}" = "failure" ]
          then
            echo "build test failure"
            exit 1
          fi
          echo "build test success"
